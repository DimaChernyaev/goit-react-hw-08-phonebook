{"version":3,"file":"static/js/647.dc5e9fa6.chunk.js","mappings":"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","sources":["components/contacts/contactList/ContactList.styled.js","components/loader/ButtonLoader.js","redux/contactsLogics/selectors.js","components/contacts/updateForm/updateForm.styled.js","components/contacts/updateForm/updateForm.js","components/contacts/modalView/ModalView.js","components/contacts/contactList/contactItem/ContactItem.jsx","components/contacts/contactList/ContactsList.js","components/contacts/filter/Filter.styled.jsx","components/contacts/filter/Filter.jsx","components/contacts/form/Form.styled.jsx","components/helpers/repeatName.js","components/contacts/form/Form.jsx","components/pageStyled/Contacts.styled.js","components/helpers/constMessage.js","components/errorMessage/ErrorMessage.styled.js","components/errorMessage/ErrorMessage.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  width: 420px;\n  gap: 12px;\n  padding: 8px 12px;\n  border: 2px solid goldenrod;\n  border-radius: 8px;\n  background-color: white;\n`;\n\nexport const ContactText = styled.div`\n  color: black;\n  font-size: 16px;\n  text-align: left;\n`;\n\nexport const ButtonItem = styled.button`\n  display: inline-flex;\n  align-items: center;\n  margin-left: auto;\n  gap: 5px;\n  padding: 8px 8px;\n  font-weight: 400;\n  font-size: 14px;\n\n  background-color: #ffffff;\n  border: 2px solid black;\n  border-radius: 40px;\n  cursor: pointer;\n\n  transition: color 250ms linear, border-color 250ms linear,\n    box-shadow 250ms linear;\n\n  &:hover {\n    color: red;\n    border-color: red;\n    box-shadow: 1px -1px 2px rgba(78, 78, 78, 0.8);\n  }\n`;\n\nexport const WrapperButton = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-left: auto;\n`;\n","import { TailSpin } from 'react-loader-spinner';\n\nconst ButtonLoader = () => {\n  return (\n    <TailSpin\n      height=\"14\"\n      width=\"14\"\n      color=\"red\"\n      ariaLabel=\"tail-spin-loading\"\n      radius=\"1\"\n      visible={true}\n    />\n  );\n};\n\nexport default ButtonLoader;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContactsItems = state => state.contacts.items;\nexport const selectIsAllLoading = state =>\n  state.contacts.isLoading.isAllLoading;\nexport const selectIsDeleteLoading = state =>\n  state.contacts.isLoading.isDeleteLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisableContacts = createSelector(\n  [selectContactsItems, selectFilter],\n  (items, filter) => {\n    return items.filter( item => item.name.toLowerCase().includes(filter));\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const ButtonUpdate = styled.button`\n  margin-top: 16px;\n  display: inline-flex;\n  align-items: center;\n  gap: 5px;\n  padding: 8px 20px;\n  font-weight: 400;\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n\n  background-color: white;\n  border: 2px solid goldenrod;\n  border-radius: 8px;\n  cursor: pointer;\n\n  transition: border-color 250ms linear;\n\n  &:hover {\n    border-color: black;\n  }\n`;\n\nexport const ContactFormUpdate = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 12px;\n  border-radius: 8px;\n  margin-bottom: 16px;\n`;\n\nexport const InputUpdate = styled(Field)`\n  padding: 5px 12px;\n  border-color: goldenrod;\n  border-radius: 8px;\n  width: 350px;\n  font-size: 18px;\n  text-align: center;\n`;\n\nexport const LabelUpdate = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  &:first-of-type {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const InputTitleUpdate = styled.span`\n  font-size: 16px;\n  font-weight: bold;\n  color: black;\n  margin-bottom: 5px;\n`;\n\nexport const ButtonClose = styled.button`\n  background-color: white;\n  border: 2px solid goldenrod;\n  border-radius: 50%;\n  cursor: pointer;\n\n  display: inline-flex;\n  padding: 3px;\n  align-items: center;\n\n  position: absolute;\n  top: 8px;\n  right: 8px;\n\n  transition: border-color 250ms linear;\n\n  &:hover {\n    border-color: black;\n  }\n`;\n\nexport const ContainerUpdateForm = styled.div`\n  position: relative;\n  padding: 10px 10px;\n`;\n","import { Formik } from 'formik';\nimport { updateContact } from 'redux/contactsLogics/operation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsItems } from 'redux/contactsLogics/selectors';\nimport {\n  ButtonUpdate,\n  InputUpdate,\n  InputTitleUpdate,\n  ContactFormUpdate,\n  LabelUpdate,\n  ButtonClose,\n  ContainerUpdateForm,\n} from './updateForm.styled';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst UpdateForm = ({ onClose, id }) => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectContactsItems);\n\n  const submitUpdateContact = (values, { resetForm }) => {\n    const oldContact = items.find(item => item.id === id);\n\n    const newContact = {\n      id,\n      name: values.name === '' ? oldContact.name : values.name,\n      number: values.number === '' ? oldContact.number : values.number,\n    };\n\n    dispatch(updateContact(newContact));\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <ContainerUpdateForm>\n      <ButtonClose type=\"button\" onClick={onClose}>\n        <AiOutlineClose />\n      </ButtonClose>\n      <Formik initialValues={initialValues} onSubmit={submitUpdateContact}>\n        <ContactFormUpdate>\n          <LabelUpdate>\n            <InputTitleUpdate>Name</InputTitleUpdate>\n            <InputUpdate type=\"text\" name=\"name\" />\n          </LabelUpdate>\n          <LabelUpdate>\n            <InputTitleUpdate>Number</InputTitleUpdate>\n            <InputUpdate type=\"tel\" name=\"number\" />\n          </LabelUpdate>\n          <ButtonUpdate type=\"submit\">Update</ButtonUpdate>\n        </ContactFormUpdate>\n      </Formik>\n    </ContainerUpdateForm>\n  );\n};\n\nexport default UpdateForm;\n","import Modal from 'react-modal';\nimport UpdateForm from '../updateForm/updateForm';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n  },\n};\n\nModal.setAppElement('#root');\n\nexport const ModalView = ({ onClose, isOpen, id }) => {\n  return (\n    <div>\n      <Modal\n        closeTimeoutMS={300}\n        style={customStyles}\n        isOpen={isOpen}\n        onRequestClose={onClose}\n      >\n        <UpdateForm onClose={onClose} id={id}/>\n      </Modal>\n    </div>\n  );\n};\n","import ButtonLoader from 'components/loader/ButtonLoader';\nimport { Contact, ContactText, ButtonItem, WrapperButton } from '../ContactList.styled';\nimport { FaUserAlt, FaRegTrashAlt, FaPen } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contactsLogics/operation';\nimport { selectIsDeleteLoading } from 'redux/contactsLogics/selectors';\nimport { useState } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { ModalView } from 'components/contacts/modalView/ModalView';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteId, setDeleteId] = useState(null);\n  const [isModal, setIsModal] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsDeleteLoading);\n\n  const handleDeleteContact = async (id, name) => {\n    setDeleteId(id);\n\n    await dispatch(deleteContact(id));\n    toast.success(`The contact named ${name} has been deleted`);\n  };\n\n  const modalOpen = () => {\n    setIsModal(true);\n  };\n\n  const closeModal = () => {\n    setIsModal(false);\n  };\n\n  return (\n    <>\n      <Toaster position=\"top-center\" />\n      <Contact>\n        <FaUserAlt size={18} />\n        <ContactText>\n          <p>Name: {name}</p>\n          <p>Number: {number}</p>\n        </ContactText>\n        <WrapperButton>\n          <ButtonItem type=\"button\" onClick={modalOpen}>\n            <FaPen />\n          </ButtonItem>\n          <ButtonItem\n            type=\"button\"\n            onClick={() => handleDeleteContact(id, name)}\n          >\n            {isLoading && deleteId === id ? (\n              <ButtonLoader />\n            ) : (\n              <>\n                <FaRegTrashAlt size={16} />\n                Delete\n              </>\n            )}\n          </ButtonItem>\n        </WrapperButton>\n        {isModal && <ModalView isOpen={isModal} onClose={closeModal} id={id} />}\n      </Contact>\n    </>\n  );\n};\n\nexport default ContactItem;\n","import { ContactList } from './ContactList.styled';\nimport ContactItem from './contactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisableContacts } from 'redux/contactsLogics/selectors';\n\nconst ContactsList = () => {\n  const visableContacts = useSelector(selectVisableContacts);\n\n  return (\n    <ContactList>\n      {visableContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactList>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const SearchInput = styled.input`\n  padding: 5px 12px;\n  border-color: goldenrod;\n  border-radius: 8px;\n  width: 350px;\n  font-size: 16px;\n  text-align: center;\n`;\n\nexport const SearchTitle = styled.span`\n  font-size: 18px;\n  color: black;\n  font-weight: bold;\n  margin-bottom: 8px;\n`;\n\nexport const SearchLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  margin-bottom: 20px;\n`;\n","import { SearchInput, SearchLabel, SearchTitle } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contactsLogics/filterSlice';\nimport { selectFilter } from 'redux/contactsLogics/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  function onSearch(event) {\n    dispatch(setFilter(event.target.value));\n  }\n\n  return (\n    <SearchLabel>\n      <SearchTitle>Search</SearchTitle>\n      <SearchInput\n        type=\"search\"\n        name=\"filter\"\n        value={filter}\n        onChange={onSearch}\n      ></SearchInput>\n    </SearchLabel>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Button = styled.button`\n  margin-top: 16px;\n  display: inline-flex;\n  align-items: center;\n  gap: 5px;\n  padding: 8px 20px;\n  font-weight: 400;\n  font-size: 16px;\n  font-weight: bold;\n  text-align: center;\n\n  background-color: white;\n  border: 2px solid goldenrod;\n  border-radius: 8px;\n  cursor: pointer;\n\n  transition: border-color 250ms linear;\n\n  &:hover {\n    border-color: black;\n  }\n`;\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 12px;\n  border-radius: 8px;\n  margin-bottom: 16px;\n`;\n\nexport const Input = styled(Field)`\n  padding: 5px 12px;\n  border-color: goldenrod;\n  border-radius: 8px;\n  width: 350px;\n  font-size: 18px;\n  text-align: center;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  &:first-of-type {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const InputTitle = styled.span`\n  font-size: 18px;\n  font-weight: bold;\n  color: black;\n  margin-bottom: 5px;\n`;\n\nexport const ValidationError = styled.div`\n  max-width: 300px;\n  text-align: center;\n  color: red;\n  font-size: 12px;\n`;\n","export function repeatName(arr, value) {\n  return arr.find(\n    contact => contact.name.toLowerCase() === value.toLowerCase()\n  );\n}\n","import {\n  Button,\n  ContactForm,\n  Label,\n  Input,\n  InputTitle,\n  ValidationError,\n} from './Form.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { repeatName } from 'components/helpers/repeatName';\nimport toast, { Toaster } from 'react-hot-toast';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { addContacts } from 'redux/contactsLogics/operation';\nimport { selectContactsItems } from 'redux/contactsLogics/selectors';\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Name is a required field! Please, fill the field'),\n  number: yup\n    .string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Number is a required field! Please, fill the field'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItems);\n\n  async function submitForm(values, { resetForm }) {\n    const repeatContactNeme = repeatName(contacts, values.name);\n\n    if (repeatContactNeme) {\n      toast.error(\n        `Sorry, but you already have ${values.name} in your contacts`\n      );\n      resetForm();\n      return;\n    }\n\n    await dispatch(addContacts(values));\n    toast.success(`Contact named ${values.name} has been add.`);\n\n    resetForm();\n  }\n\n  return (\n    <>\n      <Toaster position=\"top-center\" />\n      <Formik\n        initialValues={initialValues}\n        onSubmit={submitForm}\n        validationSchema={validationSchema}\n      >\n        <ContactForm>\n          <Label>\n            <InputTitle>Name</InputTitle>\n            <Input type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" component={ValidationError} />\n          </Label>\n          <Label>\n            <InputTitle>Number</InputTitle>\n            <Input type=\"tel\" name=\"number\" />\n            <ErrorMessage name=\"number\" component={ValidationError} />\n          </Label>\n          <Button type=\"submit\">Add contact</Button>\n        </ContactForm>\n      </Formik>\n    </>\n  );\n};\n\nexport default Form;\n","import styled from '@emotion/styled';\n\nexport const ContainerListContacts = styled.div`\n  padding: 12px;\n  border-radius: 8px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const NullContactsMessage = styled.p`\n  display: inline-flex;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  font-size: 20px;\n  color: black;\n`;\n\nexport const Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  height: 100vh;\n  display: flex;\n`;\n\nexport const TitleContacts = styled.h2`\n  font-size: 28px;\n  color: black;\n  margin-bottom: 12px;\n`;\n\nexport const WrapperPhonebook = styled.div`\n  flex-basis: 50%;\n  padding-top: 40px;\n  background: rgba(176, 230, 237, 0.5);\n  text-align: center;\n`;\n\nexport const WrapperContacts = styled.div`\n  flex-basis: 50%;\n  padding-top: 40px;\n  text-align: center;\n`;\n","export const constMessage = {\n  emptyList: \"You don't have contacts yet.\",\n  errorFetch: 'Oops! Something went wrong! Try reloading this page.',\n};\n\n","import styled from '@emotion/styled';\n\nexport const Message = styled.p`\n  color: black;\n  font-size: 16px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { Message } from \"./ErrorMessage.styled\";\n\nconst ErrorMessage = ({ children }) => {\n  return <Message>{children}</Message>;\n};\n\nexport default ErrorMessage;\n","import ContactsList from 'components/contacts/contactList/ContactsList';\nimport Filter from 'components/contacts/filter/Filter';\nimport Form from 'components/contacts/form/Form';\nimport {\n  Container,\n  ContainerListContacts,\n  TitleContacts,\n  NullContactsMessage,\n  WrapperContacts,\n  WrapperPhonebook,\n} from 'components/pageStyled/Contacts.styled';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContactsItems,\n  selectError,\n  selectIsAllLoading,\n} from 'redux/contactsLogics/selectors';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contactsLogics/operation';\nimport Loader from 'components/loader/Loader';\nimport { constMessage } from 'components/helpers/constMessage';\nimport ErrorMessage from 'components/errorMessage/ErrorMessage';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContactsItems);\n  const isLoading = useSelector(selectIsAllLoading);\n  const isError = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <WrapperPhonebook>\n        <TitleContacts>Phonebook</TitleContacts>\n        <Form />\n      </WrapperPhonebook>\n\n      <WrapperContacts>\n        <TitleContacts>Contacts</TitleContacts>\n        <ContainerListContacts>\n          <Filter />\n          {isLoading && <Loader />}\n          {isError && <ErrorMessage>{constMessage.errorFetch}</ErrorMessage>}\n          {contacts.length > 0 && !isError ? (\n            <ContactsList />\n          ) : (\n            <>\n              {!isLoading && !isError && (\n                <NullContactsMessage>\n                  {constMessage.emptyList}\n                </NullContactsMessage>\n              )}\n            </>\n          )}\n        </ContainerListContacts>\n      </WrapperContacts>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactList","styled","Contact","ContactText","ButtonItem","WrapperButton","height","width","color","ariaLabel","radius","visible","selectContactsItems","state","contacts","items","selectIsAllLoading","isLoading","isAllLoading","selectIsDeleteLoading","isDeleteLoading","selectError","error","selectFilter","filter","selectVisableContacts","createSelector","item","name","toLowerCase","includes","ButtonUpdate","ContactFormUpdate","Form","InputUpdate","Field","LabelUpdate","InputTitleUpdate","ButtonClose","ContainerUpdateForm","initialValues","number","onClose","id","dispatch","useDispatch","useSelector","type","onClick","onSubmit","values","resetForm","oldContact","find","newContact","updateContact","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","ModalView","isOpen","closeTimeoutMS","style","onRequestClose","useState","deleteId","setDeleteId","isModal","setIsModal","handleDeleteContact","deleteContact","toast","position","size","visableContacts","map","SearchInput","SearchTitle","SearchLabel","value","onChange","event","setFilter","target","Button","ContactForm","Input","Label","InputTitle","ValidationError","repeatName","arr","contact","validationSchema","yup","shape","trim","matches","required","addContacts","component","ContainerListContacts","NullContactsMessage","Container","TitleContacts","WrapperPhonebook","WrapperContacts","constMessage","Message","children","isError","useEffect","fetchContacts","Loader","length"],"sourceRoot":""}